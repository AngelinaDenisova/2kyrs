//проверить, является ли дерево идеально сбалансированным

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace tree_3
{
    public class BinaryTree // класс, реализующий АТД «дерево бинарного поиска со счетчиком вершин в дереве»
    {
        private class Node // вложенный класс, отвечающий за узлы и операции, допустимые для дерева бинарного поиска
        {
            public object inf;
            public int counter;
            public Node left;
            public Node right;

            public Node(object nodeInf) // конструктор вложенного класса, создает узел дерева
            {
                inf = nodeInf;
                counter = 1;
                left = null;
                right = null;
            }

            public static void Add(ref Node r, object nodeInf) // добавляет узел в дерево так, чтобы дерево оставалось деревом бинарного поиска
            {
                if (r == null)
                {
                    r = new Node(nodeInf);
                }
                else
                {
                    r.counter++;
                    if (((IComparable)(r.inf)).CompareTo(nodeInf) > 0)
                    {
                        Add(ref r.left, nodeInf);
                    }
                    else
                    {
                        Add(ref r.right, nodeInf);
                    }
                }
            }

            public static void Preorder(Node r) // прямой обход дерева
            {
                if (r != null)
                {
                    Console.Write("({0}, {1}) ", r.inf, r.counter);
                    Preorder(r.left);
                    Preorder(r.right);
                }
            }
        }

        private Node root;

        // свойство позволяет получить доступ к значению информационного поля корня дерева
        public object Inf
        {
            set { root.inf = value; }
            get { return root.inf; }
        }

        public int Counter
        {
            get { return root.counter; }
        }

        public BinaryTree() // открытый конструктор
        {
            root = null;
        }

        private BinaryTree(Node r) // закрытый конструктор
        {
            root = r;
        }

        public void Add(object nodeInf) // добавление узла в дерево
        {
            Node.Add(ref root, nodeInf);
        }

        public bool IsPerfectlyBalanced()
        {
            return CheckBalance(root) != -1;
        }


        // организация различных способов обхода дерева
        public void Preorder()
        {
            Node.Preorder(root);
        }

        private int CheckBalance(Node node)
        {
            if (node == null) // Если текущий узел равен null, то мы считаем, что его высота равна 0, и возвращаем 0.
            {
                return 0;
            }

            int leftCount = GetCount(node.left); // вызываем метод GetCount для левого поддерева и сохраняем количество узлов в нем в переменной leftCount
            int rightCount = GetCount(node.right); // по аналогии для правого

            if (Math.Abs(leftCount - rightCount) > 1) // проверяем условие идеальной сбалансированности
            {
                return -1;
            }

            int leftResult = CheckBalance(node.left); // проверяем идеальную сбалансированность для левого поддерева
            int rightResult = CheckBalance(node.right); // аналогично для правого

            if (leftResult == -1 || rightResult == -1) // если хотя бы одно поддерево не идеально сбалансировано, возвращаем -1
            {
                return -1;
            }

            return 1 + Math.Max(leftResult, rightResult); // иначе возвращаем количество узлов в текущем поддереве
        }

        private int GetCount(Node node)
        {
            if (node == null)
            {
                return 0;
            }
            else
            {
                return node.counter; // возвращаем количество узлов в поддереве, хранящееся в узле
            }
        }
    }
}


        class Program
{
    static void Main()
    {
        BinaryTree tree = new BinaryTree();	//инициализируем дерево
        //на основе данных файла создаем дерево
        using (StreamReader fileIn = new StreamReader("D:\\СИаКОД\\input.txt"))
        {
            string line = fileIn.ReadToEnd();
            string[] data = line.Split(' ');
            foreach (string item in data)
            {
                tree.Add(int.Parse(item));
            }
        }

        tree.Preorder();	//используя прямой обход выводим на экран узлы дерева
        Console.WriteLine();

        bool isBalanced = tree.IsPerfectlyBalanced();
        Console.WriteLine($"Дерево идеально сбалансировано: {isBalanced}");
    }

}
