// Решить задачу, разработав собственную структуру для хранения информации
// Исходная информация хранится в текстовом файле input.txt, каждая строка которого содержит полную информацию о некотором объекте; результирующая информация должна быть записана в файл output.txt.
//Для хранения данных внутри программы организовать массив структур. Сортировку данных реализовать, реализуя метод CompareTo(T) стандартного интерфейса IComparable<in T>
//На основе данных входного файла составить список сотрудников учреждения, включив следующие данные: ФИО, год принятия на работу, должность, зарплата, рабочий стаж.
// Вывести в новый файл информацию о сотрудниках, имеющих зарплату ниже определенного уровня, отсортировав их по рабочему стажу
using System;
using System.IO;
using System.Net;

namespace ConsoleApp5
{
    struct Work : IComparable<Work> // Структура описывающая сотрудника
    {
        public string Fio, Pos;
        public int Year, Exp, Zp;

        public Work(string fio, int year, string pos, int exp, int zp) // конструктор структуры 
        {
            Fio = fio;
            Year = year;
            Pos = pos;
            Exp = exp;
            Zp = zp;
        }
        public int CompareTo(Work other)
        {
            if (this.Exp == other.Exp)
            {
                return 0;
            }
            else if (this.Exp < other.Exp)
            {
                return -1;
            }
            else
            {
            return 1;
            }
        }
    }

    class Program
    {
        static Work[] Input()
        {
            string[] lines = File.ReadAllLines("C:\\Users\\gelya\\OneDrive\\Рабочий стол\\сиакод\\input.txt");
            Work[] employees = new Work[lines.Length];

            for (int i = 0; i < lines.Length; i++)
            {
                string[] workInfo = lines[i].Split(';');
                string fio = workInfo[0];
                int year = int.Parse(workInfo[1]);
                string pos = workInfo[2];
                int exp = int.Parse(workInfo[3]);
                int zp = int.Parse(workInfo[4]);

                employees[i] = new Work(fio, year, pos, exp, zp);
            }
            return employees;
        }

        static Work[] FilterByZp(Work[] employees, int zp)
        {
            return Array.FindAll(employees, s => s.Zp < zp);
        }

        static void Output(Work[] employees)
        {
            using (StreamWriter fileOut = new StreamWriter("C:\\Users\\gelya\\OneDrive\\Рабочий стол\\сиакод\\output.txt"))
            {
                foreach (Work employ in employees)
                {
                    fileOut.WriteLine($"{employ.Fio}; {employ.Year}; {employ.Pos}; {employ.Exp}; {employ.Zp}");
                }
            }
        }
        static void Main()
        {
            Work[] employees = Input();
            Array.Sort(employees);

            Console.WriteLine("Введите уровень зарплаты ");
            int ZpToFind = int.Parse(Console.ReadLine());

            Work[] filteredEmployees = FilterByZp(employees, ZpToFind);
            Output(filteredEmployees);
        }
    }
}
