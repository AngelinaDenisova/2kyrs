//Найти две наиболее удаленных друг от друга точки на плоскости
using System;
using System.IO;
using System.Collections.Generic;
namespace ConsoleApp5
{
    //// Структура Point для хранения координат точек на плоскости
    struct Point
    {
        public double X;
        public double Y;

        public Point(double x, double y)
        {
            X = x;
            Y = y;
        }
    }

    class Program
    {
        static void Main()
        {
            string inputFile = "C:\\Users\\gelya\\OneDrive\\Рабочий стол\\сиакод\\points.txt";
            string outputFile = "C:\\Users\\gelya\\OneDrive\\Рабочий стол\\сиакод\\result.txt";

            List<Point> points = ReadPointsFromFile(inputFile); //// Считываем точки из файла в список
            if (points.Count < 2)
            {
                Console.WriteLine("Недостаточно точек в файле.");
                return;
            }

            List<Tuple<Point, Point>> result = FindFarthestPoints(points);
            WriteResultToFile(outputFile, result);

            Console.WriteLine("Самые дальние точки были найдены и сохранены в файл result");
        }

        static List<Point> ReadPointsFromFile(string inputFile) // // Функция для чтения точек из файла
        {
            List<Point> points = new List<Point>();

            using (StreamReader reader = new StreamReader(inputFile))
            {
                while (!reader.EndOfStream)
                {
                    string line = reader.ReadLine(); //// Считываем строку из файла.
                    string[] coordinates = line.Split(' '); ///Разделяем строку на координаты x и y по пробелу
                    // Проверяем, что в строке есть две координаты и они успешно распарсились в числа
                    if (coordinates.Length == 2 && double.TryParse(coordinates[0], out double x) && double.TryParse(coordinates[1], out double y))
                        points.Add(new Point(x, y)); // Создаем новую точку и добавляем ее в список точек.
                }
            }

            return points; // Возвращаем список точек
        }
        // Функция для поиска двух наиболее удаленных точек.
        static List<Tuple<Point, Point>> FindFarthestPoints(List<Point> points)
        {
            double maxDistance = 0; // Максимальное расстояние между точками.
            List<Tuple<Point, Point>> result = new List<Tuple<Point, Point>>(); // Список для хранения результатов.

            for (int i = 0; i < points.Count; i++)
            {
                for (int j = i + 1; j < points.Count; j++)
                {
                    double distance = CalculateDistance(points[i], points[j]); // Вычисляем расстояние между двумя точками.

                    if (distance > maxDistance)
                    {
                        maxDistance = distance;
                        result.Clear(); // Очищаем список результатов.
                        result.Add(Tuple.Create(points[i], points[j])); /// Обновляем результат с новыми точками.
                    }
                    else if (distance == maxDistance)
                    {
                        result.Add(Tuple.Create(points[i], points[j])); // Добавляем точки с одинаковым максимальным расстоянием.
                    }
                }
            }

            return result;
        }

        static double CalculateDistance(Point p1, Point p2) //   // Функция для вычисления расстояния между двумя точками
        {
            double dx = p1.X - p2.X;
            double dy = p1.Y - p2.Y;
            return Math.Sqrt(dx * dx + dy * dy);
        }

        static void WriteResultToFile(string outputFile, List<Tuple<Point, Point>> result)
        {
            using (StreamWriter writer = new StreamWriter(outputFile))
            {
                foreach (var tuple in result)
                {
                    writer.WriteLine($"Точка 1: ({tuple.Item1.X}, {tuple.Item1.Y})");
                    writer.WriteLine($"Точка 2: ({tuple.Item2.X}, {tuple.Item2.Y})");
                    writer.WriteLine();
                }
            }
        }
    }
}
